@model Prochat.User
@{
    ViewBag.Title = "ProChat";
}
<div class="fullContainer">

    <div class="leftRail">
        <h2>Chat controls</h2>
        <br /><br />
        <audio controls autoplay></audio>
    </div>

    <div class="chatContainer">
        <div id="discussion"></div>
        <textarea id="message"></textarea>
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />

    </div>

    <div class="rightRail">

    </div>


</div>



<style>
    .container {
        max-width: 100%;
    }

    .rightRail {
        float: right;
        width: 20%;
    }

    .leftRail {
        float: left;
        width: 20%;
    }

    .chatContainer {
        width: 60%;
        display: inline-block;
    }

    #message {
        width: 100%;
        max-width: 1000px;
    }

    #discussion {
        height: 880px;
        overflow: scroll;
    }

    body {
        background-color: #D7D7D7;
    }

   
</style>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <script type="text/javascript">


    $(function () {
        // Reference the auto-generated proxy for the hub.


        var chat = $.connection.ChatHub;

        // Create a function that the hub can call back to display messages.
        chat.client.addNewMessageToPage = function (name, message, messageNumber) {
            // Add the message to the page.
            $('#discussion').append('<div class="strangerMessage" id="' + name + messageNumber + '"><strong>' + htmlEncode(name + "    " + messageNumber)
                 + '</strong>' + htmlEncode(message) + '<hr></div>');
            var elem = document.getElementById('discussion');
            elem.scrollTop = elem.scrollHeight;

            $('#embedToggle' + messageNumber).click(function (e) {
                if ($('#embedToggle' + messageNumber).text() == "Hide") {

                    $('#embedData' + messageNumber).hide();
                    $('#embedToggle' + messageNumber).text("Show");
                }
                else {
                    $('#embedData' + messageNumber).show();
                    $('#embedToggle' + messageNumber).text("Hide");
                }
                
            });
        };

        var username = '@Model.UserName';


        if (username == "Default") {
            var entered = prompt("What would you like your username to be?: ", "Tester" + Math.round(Math.random() * 1000));
            '@Model.UserName = entered';
            username = entered;
            }


            $('#displayname').val(username);


            // Set initial focus to message input box.
            $('#message').focus();

            $('#message').keypress(keypressHandler);

            // Start the connection.
            $.connection.hub.start().done(function () {
                chat.server.history();
                $('#sendmessage').click(function () {

                    sendMessage(chat);
                });


            });
        });

        function keypressHandler(e) {
            if (e.which == 13) {
                $('#sendmessage').blur();
                var chat = $.connection.ChatHub;
                sendMessage(chat);
            }
        }

        function sendMessage(chat) {

            // Call the Send method on the hub.
            chat.server.send($('#displayname').val(), $('#message').val());
            // Clear text box and reset focus for next comment.
            $('#message').val('').focus();

        }

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            //var encodedValue = $('<div />').text(value).html();
            var encodedValue = "<div>" + value + "</div>";
            return encodedValue;
        }


        var audio = window.audio = document.querySelector('audio');
        var constraints = window.constraints = {
            audio: true,
            video: false
        };

        navigator.getUserMedia = navigator.getUserMedia ||
          navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

        function successCallback(stream) {
            var videoTracks = stream.getVideoTracks();
            var audioTracks = stream.getAudioTracks();
            if (audioTracks.length === 1 && videoTracks.length === 0) {
                console.log('Got stream with constraints:', constraints);
                console.log('Using audio device: ' + audioTracks[0].label);
                stream.onended = function () {
                    console.log('Stream ended');
                };
            }
            window.stream = stream; // make variable available to browser console
            if (window.URL) {
                audio.src = window.URL.createObjectURL(stream);
            } else {
                audio.src = stream;
            }
            /*
            //Connect the media to RTC
            var connection = new RTCPeerConnection(null);
            connection.addStream(stream);

            //Create offer
            connection.createOffer(function (desc) {
                connection.setLocalDescription(desc, function () {
                    //Send to peer
                    $.connection.hub.server.send(JSON.stringify({ "sdp": desc })); //SignalR call
                });
            });
            */
        }

        function errorCallback(error) {
            console.log('navigator.getUserMedia error: ', error);
        }

        navigator.getUserMedia(constraints, successCallback, errorCallback);
    </script>
}