@model Prochat.User
@{
    ViewBag.Title = "ProChat";
}

<div class="fullContainer">

    <div class="leftRail">
        <h2>Chat controls</h2>
        <br /><br />
        <video id="stream" width = "300" height="200"autoplay></video>
        <br /><br />
        <div id="roomUsers"><h3>Users in room</h3><hr></div>
        <input id ="callId" type="text" value="">
        <button id="callButton">Call</button>
    </div>

    <div class="chatContainer">
        <div id="discussion"></div>
        <textarea id="message"></textarea>
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />

    </div>

    <div class="rightRail">

    </div>


</div>



@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <!--Used for calls-->
    <script src="http://cdn.peerjs.com/0.3/peer.js"></script>

    <script type="text/javascript">

    $(function () {
        // Reference the auto-generated proxy for the hub.


        var chat = $.connection.ChatHub;

        // Create a function that the hub can call back to display messages.
        chat.client.addNewMessageToPage = function (name, message, messageNumber) {
            // Add the message to the page.
            $('#discussion').append('<div class="strangerMessage" id="' + name + messageNumber + '"><strong>' + htmlEncode(name + "    " + messageNumber)
                 + '</strong>' + htmlEncode(message) + '</div>');
            var elem = document.getElementById('discussion');
            elem.scrollTop = elem.scrollHeight;

            $('#embedToggle' + messageNumber).click(function (e) {
                if ($('#embedToggle' + messageNumber).text() == "Hide") {

                    $('#embedData' + messageNumber).hide();
                    $('#embedToggle' + messageNumber).text("Show");
                }
                else {
                    $('#embedData' + messageNumber).show();
                    $('#embedToggle' + messageNumber).text("Hide");
                }

            });
        };

        var username = '@Model.UserName';


        if (username == "Default") {
            var entered = prompt("What would you like your username to be?: ", "Tester" + Math.round(Math.random() * 1000));
            '@Model.UserName = entered';
            username = entered;
        }


        $('#displayname').val(username);


        // Set initial focus to message input box.
        $('#message').focus();

        $('#message').keypress(keypressHandler);

        $(window).unload(function () {
            alert('Thanks for chatting!');
            chat.server.leave('@Model.UserName');
        });



        // Start the connection.
        $.connection.hub.start().done(function () {
            chat.server.history();
            chat.server.join('@Model.UserName');

            //chat.server.getConnectedUsers();
            //console.log('Joined room as @Model.UserName');
            $('#sendmessage').click(function () {

                sendMessage(chat);
            });


        });

        chat.client.loadUsers = function (data) {
            loadUsers(data);
        };

        chat.client.clearUsers = function (data) {
            $('#roomUsers > h4').remove();
        };

    });

    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    var peer = new Peer('@Model.UserName', { key: '2kkgyhe7ky6z85mi' });
    console.log("registered with peer name of @Model.UserName");

    $('#callButton').click(function () {
        console.log("Call initiated.");
        console.log("Calling " + $('#callId').text());

        navigator.getUserMedia({ video: true, audio: true }, function (stream) {
            var call = peer.call('Toon', stream);
            call.on('stream', function (remoteStream) {
                var video = document.querySelector('video');
                window.stream = remoteStream; // stream available to console
                if (window.URL) {
                    video.src = window.URL.createObjectURL(remoteStream);
                } else {
                    video.src = remoteStream;
                }
            });
        }, function (err) {
            console.log('Failed to get local stream', err);
        });
    });


    peer.on('call', function (call) {
        console.log("Incoming call ");
        navigator.getUserMedia({ video: true, audio: true }, function (stream) {
            call.answer(stream); // Answer the call with an A/V stream.
            call.on('stream', function (remoteStream) {
                var video = document.querySelector('video');
                window.stream = remoteStream; // stream available to console
                if (window.URL) {
                    video.src = window.URL.createObjectURL(remoteStream);
                } else {
                    video.src = remoteStream;
                }
            });
        }, function (err) {
            console.log('Failed to get local stream', err);
        });
    });


    function keypressHandler(e) {
        if (e.which == 13) {
            $('#sendmessage').blur();
            var chat = $.connection.ChatHub;
            sendMessage(chat);
        }
    }

    function sendMessage(chat) {

        // Call the Send method on the hub.
        chat.server.send($('#displayname').val(), $('#message').val());
        // Clear text box and reset focus for next comment.
        $('#message').val('').focus();

    }

    // This optional function html-encodes messages for display in the page.
    function htmlEncode(value) {
        //var encodedValue = $('<div />').text(value).html();
        var encodedValue = "<div>" + value + "</div>";
        return encodedValue;
    }

    function loadUsers(data) {
        console.log("Adding user to room: " + data);
        $('#roomUsers').append("<h4>" + data + "</h4>");

    }

    function unload() {
        console.log("Unloading");
        chat.server.leave('@Model.UserName');
    }


    </script>
}