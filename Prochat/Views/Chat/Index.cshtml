@model User
@{
    ViewBag.Title = "ProChat";
}


<div class="row fullContainer">

    <div class="col-lg-2 leftRail">
        <h2>Chat controls</h2>
        <br/><br/>
        <div id="roomUsers">
            <h3>Users in room</h3><hr>
        </div>


    </div>

    <div class="col-lg-8 chatContainer">
        <div id="discussion"></div>
        <div class="row">
            <div class="col-md-12">
                <div class="input-group">
                    <input type="text" id="chatInput">
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default" id="sendmessage">Send</button>
                    </span>
                </div>

                </div>

            <input type="hidden" id="displayname" />
        </div>
    </div>

    <div class="col-lg-2 rightRail">
        <div class="row">
            <button id="userContent">Track content</button>
        </div>
        <div class="row">
            <button id="voiceCallRoom" class="btn btn-primary">Call Room</button>
            @*<button id="videoCallRoom" class="btn btn-primary">Video Call Room</button>*@
        </div>
    </div>


</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    @* ReSharper disable once Html.PathError *@
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <!--Used for 1-to-1 calls-->
    <script src="http://cdn.peerjs.com/0.3/peer.js"></script>
    <!--Convert TextArea to WYSIWYG editor-->
    @*<script src="~/Scripts/wysihtml5-0.3.0.min.js"></script>*@
    <script src="~/Scripts/advanced.js"></script>
    <!--Used for group calls-->
    <script src="//cdn.webrtc-experiment.com/RTCMultiConnection.js"></script>

    <script type="text/javascript">
        var focus = true;
        $(function() {


            $("#userContent").click(function() {
                $.fn.showModal = function() {
                    if ($("#modal").length == 0) {
                        
                    }
                }
            });


            var chat = $.connection.ChatHub;

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function(name, message, messageNumber) {
                // Add the message to the page.
                $("#discussion").append("<div id=\"" + name + messageNumber + "\" class=\"row row-flex row-flex-wrap message\"><div id=\"messageName\" class=\"col-md-1\">" + name
                    + "</div><div id=\"messageContent\" class=\"col-md-11\">" + htmlEncode(message) + "</div>");
                var elem = document.getElementById("discussion");
                elem.scrollTop = elem.scrollHeight;

                PlaySound();

                $("#embedToggle" + messageNumber).click(function() {
                    if ($("#embedToggle" + messageNumber).text() === "Hide") {

                        $("#embedData" + messageNumber).hide();
                        $("#embedToggle" + messageNumber).text("Show");
                    } else {
                        $("#embedData" + messageNumber).show();
                        $("#embedToggle" + messageNumber).text("Hide");
                    }

                });
            };

            var username = "@Model.UserName";


            if (username === "Default") {
                var entered = prompt("What would you like your username to be?: ", "Tester" + Math.round(Math.random() * 1000));
                @Model.UserName = entered;
                username = entered;
            }


            $("#displayname").val(username);


            // Set initial focus to message input box.
            $("#chatInput").focus();

            $("#chatInput").keypress(keypressHandler);

            $(window).unload(function() {
                alert("Thanks for chatting!");
                chat.server.leave("@Model.UserName");
            });

            $(window).focus(function() {
                focus = true;
            });

            $(window).blur(function() {
                focus = false;
            });

            var videoConnection = new window.RTCMultiConnection();

            videoConnection.onstream = function(e) {
                $(".rightRail").append(e.mediaElement);
                /*
            $('.rightRail').append('<button id="addScreen">Screenshare</button>');
            $('#addScreen').click(function () {
                console.log("adding screenshare");
                videoConnection.removeStream({
                    video: true
                });
                videoConnection.addStream({
                    screen: true,
                    oneway: true
                });
                videoConnection.open();
            });
            */
            };

            videoConnection.connect();
            $("#videoCallRoom").click(function() {
                videoConnection.open();
            });

            var voiceConnection = new window.RTCMultiConnection();

            voiceConnection.session = {
                audio: true,
                video: false
            };

            voiceConnection.onstream = function(e) {
                $(".rightRail").append(e.mediaElement);
            };

            $("#voiceCallRoom").click(function() {
                voiceConnection.open();
            });


            // Start the connection.
            $.connection.hub.start().done(function() {
                chat.server.history();
                chat.server.join("@Model.UserName");

                //chat.server.getConnectedUsers();
                //console.log('Joined room as @Model.UserName');
                $("#sendmessage").click(function() {

                    sendMessage(chat);
                });


            });

            chat.client.loadUsers = function(data) {
                loadUsers(data);
            };

            chat.client.clearUsers = function() {
                $("#roomUsers > button").remove();
            };

        });

        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

        var peer = new Peer("@Model.UserName", { key: "2kkgyhe7ky6z85mi" });
        console.log("registered with peer name of @Model.UserName");


        peer.on("call", function(call) {
            console.log("Incoming call ");
            navigator.getUserMedia({ video: true, audio: true }, function(stream) {
                call.answer(stream); // Answer the call with an A/V stream.
                call.on("stream", function(remoteStream) {
                    var video = document.querySelector("video");
                    window.stream = remoteStream; // stream available to console
                    if (window.URL) {
                        video.src = window.URL.createObjectURL(remoteStream);
                    } else {
                        video.src = remoteStream;
                    }
                });
            }, function(err) {
                console.log("Failed to get local stream", err);
            });
        });


        function keypressHandler(e) {
            console.log("Key pressed: " + e.which);
            //Send if enter is pressed
            if (e.which === 13) {
                if (e.shiftKey) {
                    //Don't send if shift is also pressed; instead, add a new line character
                    $("#chatInput").val($("#chatInput").val() + "<br>");
                    return;
                }
                $("#sendmessage").blur();
                var chat = $.connection.ChatHub;
                sendMessage(chat);
            }
        }

        function sendMessage(chat) {
            //var editor = $(".wysihtml5-sandbox").contents().find("body");
            // Call the Send method on the hub.
            chat.server.send($("#displayname").val(),   $("#chatInput").val());
            //nicEditors.findEditor('message').setContent(''); //Clear out editor
            // Clear text box and reset focus for next comment.
            $("#chatInput").val("").focus();

        }

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            //var encodedValue = $('<div />').text(value).html();
            var encodedValue = "<div>" + value + "</div>";
            return encodedValue;
        }

        function loadUsers(data) {
            console.log("Adding user to room: " + data);
            //$('#roomUsers').append( data + "<audio controls></audio>");
            $("#roomUsers").append("<br><button class=\"callButton\" type=\"button\">" + data + "</button>");
            $(".callButton").click(function() {
                console.log("Call initiated.");


                var toCall = $(this).text();

                console.log("Calling " + toCall);

                navigator.getUserMedia({ video: true, audio: true }, function(stream) {
                    var call = peer.call(toCall, stream);
                    call.on("stream", function(remoteStream) {
                        var video = document.querySelector("video");
                        window.stream = remoteStream; // stream available to console
                        if (window.URL) {
                            video.src = window.URL.createObjectURL(remoteStream);
                        } else {
                            video.src = remoteStream;
                        }
                    });
                }, function(err) {
                    console.log("Failed to get local stream", err);
                });
            });
        }

        function unload() {
            console.log("Unloading");
            window.chat.server.leave("@Model.UserName");
        }

        var soundObject = null;

        function PlaySound() {
            //Don't play a message alert if the user is in the window
            if (focus)
                return;

            if (soundObject == null) {
                $("body").append("<audio id=\"soundPlayer\" src=\"/Content/Sounds/alert.wav\"></audio>");
                soundObject = document.getElementById("soundPlayer");
            }
            console.log("Playing sound");
            soundObject.play();

        }

    </script>
}